{"version":3,"sources":["Components/HeaderComponent/Header.jsx","Constants/Constant.js","Components/ErrorBoundryComponent/ErrorBoundry.jsx","Components/AddDataBtnComponent/AddDataBtn.jsx","Utility/formFields.js","Components/NoDataComponent/NoData.jsx","Components/ErrrorMessageComponent/ErrorMessage.jsx","Components/LoadingSpinnerComponent/LoadingSpinner.jsx","Components/DataContainerComponent/DataContainer.jsx","Components/DataTableComponent/DataTableComp.jsx","Components/FormComponent/Form.jsx","Components/ModalComponent/Modal.jsx","App.js","Configurations/DBConfig.js","serviceWorker.js","Redux/Reducers/reducer.js","Redux/Store/store.js","index.js"],"names":["Header","GetErrorMSG","customStyles","table","style","backgroundColor","headRow","border","borderRadius","headCells","fontSize","fontWeight","rows","marginTop","color","boxShadow","outline","pagination","justifyContent","minHeight","pageButtonsStyle","ErrorBoundary","props","state","hasError","error","info","this","setState","className","children","React","Component","AddDataBtn","onClick","showAddUpdateForm","formFields","fieldName","fieldId","fieldType","fieldRequired","fieldRegEx","readOnly","maxLength","fieldOptions","NoData","ErrorMessage","LoadingSpinner","DataTableComp","columns","name","selector","sortable","cell","row","update","bind","delete","button","tabledata","isResponse","isError","length","noHeader","highlightOnHover","paginationComponentOptions","rowsPerPageText","dense","size","theme","defaultSortField","data","Modal","WrappedComponent","modal","cancelHandler","event","hideAddUpdateForm","preventDefault","resetData","i","value","errorState","message","Error","submitHandler","firstName","lastName","address","country","pinCode","setTimeout","addUpdateData","handleChange","evt","field","target","detectInputValidation","timeout","clearTimeout","getPincodeState","prevState","errroMessage","setErrorState","errorMsg","RegExp","attributes","regex","test","pin","fetch","then","res","json","result","map","key","htmlFor","required","type","autoComplete","onChange","cols","item","nextProps","initialData","initialState","DataContainer","useState","setErrorCatch","setisError","setIsResponse","setTableData","useIndexedDB","add","getAll","deleteRecord","setShowAddUpdateForm","initialFormData","setInitialFormData","contextData","useSelector","dispatch","useDispatch","getTableData","payload","useEffect","refreshTable","resp","keys","Object","forEach","undefined","id","console","log","window","alert","confirm","datatoUpdateState","initDB","version","objectStoresMeta","store","storeConfig","keyPath","autoIncrement","storeSchema","keypath","options","unique","App","Boolean","location","hostname","match","rootReducer","action","createStore","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.1379824d.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction Header() {\r\n  return (\r\n    <header>\r\n      <h4>Data Assignment</h4>\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","export const GetErrorMSG =\r\n  \"Oops..Seems like some error occurred while loading the data. Please refresh the page or try after some time.\";\r\nexport const AddErrorMsg = \"Error while adding data, Please try again!\";\r\nexport const UpdateErrorMsg = \"Error while updating data, Please try again!\";\r\nexport const DeleteErrorMsg = \"Error while deleting data, Please try again!\";\r\n\r\nexport const NameErrorMsg = \"Only characters are allowed from A-Z\";\r\nexport const SpecialCharErrorMsg =\r\n  \"Special Characters are not allowed excluding  [ - and . ]\";\r\nexport const PinCodeErrorMsg = \"Only number allowed\";\r\n\r\nexport const customStyles = {\r\n  table: {\r\n    style: {\r\n      backgroundColor: \"#f0f1f3\",\r\n    },\r\n  },\r\n  headRow: {\r\n    style: {\r\n      border: \"1px solid transparent\",\r\n      borderRadius: \"40px\",\r\n    },\r\n  },\r\n  headCells: {\r\n    style: {\r\n      fontSize: \"12px\",\r\n      fontWeight: \"bold\",\r\n    },\r\n  },\r\n  rows: {\r\n    style: {\r\n      border: \"1px solid transparent\",\r\n      borderRadius: \"40px\",\r\n      marginTop: \"7px\",\r\n      color: \"#878c92\",\r\n      fontSize: \"12px\",\r\n      fontWeight: \"500\",\r\n      boxShadow: \"0px 0px 8px 0px #dedede\",\r\n\r\n      \"&:hover\": {\r\n        color: \"#878c92\",\r\n        backgroundColor: \"#fff!important\",\r\n        outline: \"none!important\",\r\n      },\r\n\r\n      \"&:not(:last-of-type)\": {\r\n        border: \"1px solid transparent\",\r\n      },\r\n    },\r\n  },\r\n  pagination: {\r\n    style: {\r\n      justifyContent: \"center\",\r\n      fontSize: \"12px\",\r\n      border: \"1px solid transparent\",\r\n      borderRadius: \"40px\",\r\n      minHeight: \"40px\",\r\n      marginTop: \"7px\",\r\n    },\r\n    pageButtonsStyle: {\r\n      color: \"green\",\r\n    },\r\n  },\r\n};\r\n","import React from 'react';\r\nimport { GetErrorMSG} from '../../Constants/Constant'\r\n\r\nclass ErrorBoundary extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { hasError: false };\r\n  }\r\n\r\n  componentDidCatch(error, info) {\r\n    this.setState({ hasError: true });\r\n  }\r\n\r\n  render() {\r\n    if (this.state.hasError) {\r\n      return <section className=\"locationSection\">\r\n      <p> {GetErrorMSG}</p>\r\n    </section>;\r\n    }\r\n    return this.props.children;\r\n  }\r\n}\r\n\r\nexport default ErrorBoundary;\r\n","import React from \"react\";\r\n\r\nfunction AddDataBtn(props) {\r\n  return (\r\n    <>\r\n    <button\r\n      className=\"addDataBtn\"\r\n      onClick={() => props.showAddUpdateForm()}\r\n    >\r\n      &#43; Add Data\r\n    </button>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default AddDataBtn;\r\n","export const formFields = [\r\n  {\r\n    fieldName: \"First Name\",\r\n    fieldId: \"firstName\",\r\n    fieldType: \"text\",\r\n    fieldRequired: true,\r\n    fieldRegEx: \"^[a-zA-Z]+$\",\r\n    readOnly:false,\r\n    maxLength:20\r\n  },\r\n  {\r\n    fieldName: \"Last Name\",\r\n    fieldId: \"lastName\",\r\n    fieldType: \"text\",\r\n    fieldRequired: true,\r\n    fieldRegEx: \"^[a-zA-Z]+$\",\r\n    readOnly:false,\r\n    maxLength:20\r\n  },\r\n  {\r\n    fieldName: \"Address\",\r\n    fieldId: \"address\",\r\n    fieldType: \"textArea\",\r\n    fieldRequired: true,\r\n    fieldRegEx: \"^[a-zA-Z0-9, .]+$\",\r\n    readOnly:false,\r\n    maxLength:140\r\n  },\r\n  {\r\n    fieldName: \"Country\",\r\n    fieldId: \"country\",\r\n    fieldType: \"select\",\r\n    fieldRequired: true,\r\n    fieldOptions: [\"US\", \"UK\", \"CA\", \"NZ\", \"AU\" , \"IN\"],\r\n    fieldRegEx: \"\",\r\n    readOnly:false\r\n  },\r\n  {\r\n    fieldName: \"Pincode\",\r\n    fieldId: \"pinCode\",\r\n    fieldType: \"text\",\r\n    fieldRequired: true,\r\n    fieldRegEx: \"^[0-9]+$\",\r\n    readOnly:false,\r\n    maxLength:6\r\n  },\r\n  {\r\n    fieldName: \"State\",\r\n    fieldId: \"state\",\r\n    fieldType: \"text\",\r\n    fieldRequired: true,\r\n    fieldRegEx: \"\",\r\n    readOnly:true\r\n  },\r\n];\r\n","import React from \"react\";\r\n\r\nfunction NoData() {\r\n  return (\r\n    <section className=\"locationSection noData\">\r\n      <div>\r\n        <p>There is no data added right now. Kindly add your data first.</p>\r\n      </div>\r\n    </section>\r\n  );\r\n}\r\n\r\nexport default NoData;\r\n","import React from \"react\";\r\n\r\nfunction ErrorMessage(props) {\r\n  return (\r\n    <section className=\"locationSection\">\r\n        <p> {props.ErrorMessage}</p>\r\n      </section>\r\n  );\r\n}\r\n\r\nexport default ErrorMessage;\r\n","import React from \"react\";\r\n\r\nfunction LoadingSpinner() {\r\n  return (\r\n    <section className=\"locationSection loading\">\r\n      <div className=\"lds-roller\">\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n      </div>\r\n    </section>\r\n  );\r\n}\r\n\r\nexport default LoadingSpinner;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { useIndexedDB } from \"react-indexed-db\";\r\nimport AddDataBtn from \"../AddDataBtnComponent/AddDataBtn\";\r\nimport { formFields } from \"../../Utility/formFields\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\n\r\nimport {\r\n  AddErrorMsg,\r\n  UpdateErrorMsg,\r\n  DeleteErrorMsg,\r\n} from \"../../Constants/Constant\";\r\nimport DataTableComp from \"../DataTableComponent/DataTableComp\";\r\nimport Form from \"../FormComponent/Form\";\r\n\r\nconst initialState = {};\r\nfor (let i = 0; i < formFields.length; i++) {\r\n  initialState[formFields[i].fieldId] = {\r\n    value: \"\",\r\n    errorState: { error: false, message: \"\" },\r\n  };\r\n}\r\n\r\nfunction DataContainer() {\r\n  const [, setErrorCatch] = useState(null);\r\n  const [isError, setisError] = useState(false);\r\n  const [isResponse, setIsResponse] = useState(false);\r\n  const [tabledata, setTableData] = useState([]);\r\n  const { add, update, getAll, deleteRecord } = useIndexedDB(\"cpData\");\r\n  const [showAddUpdateForm, setShowAddUpdateForm] = useState(false);\r\n  const [initialFormData, setInitialFormData] = useState(initialState);\r\n\r\n  const contextData = useSelector((state) => state);\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    getTableData();\r\n  }, [contextData.refreshTable]);\r\n\r\n  function resetData() {\r\n    let initialState = {};\r\n    for (let i = 0; i < formFields.length; i++) {\r\n      initialState[formFields[i].fieldId] = {\r\n        value: \"\",\r\n        errorState: { error: false, message: \"\" },\r\n      };\r\n    }\r\n    setInitialFormData(initialState);\r\n  }\r\n\r\n  function updateTableData(row) {\r\n    let keys = Object.keys(row);\r\n    let datatoUpdateState = {};\r\n    keys.forEach((item) => {\r\n      datatoUpdateState[item] = {\r\n        value: row[item],\r\n        errorState: { error: false, message: \"\" },\r\n      };\r\n    });\r\n    setInitialFormData(datatoUpdateState);\r\n    setShowAddUpdateForm(true);\r\n  }\r\n\r\n  function getTableData() {\r\n    getAll().then(\r\n      (data) => {\r\n        setTableData(data);\r\n        setIsResponse(true);\r\n        setisError(false);\r\n        dispatch({\r\n          type: \"REFRESH_DATA\",\r\n          payload: false,\r\n        });\r\n      },\r\n      (error) => {\r\n        setTableData([]);\r\n        setIsResponse(true);\r\n        setisError(true);\r\n        setErrorCatch(() => {\r\n          throw new Error(\"This is an error\");\r\n        });\r\n      }\r\n    );\r\n  }\r\n\r\n  function addUpdateData(resp) {\r\n    let keys = Object.keys(resp);\r\n    let data = {};\r\n    keys.forEach((item) => {\r\n      if (item !== \"Error\") {\r\n        data[item] =\r\n          item === \"id\"\r\n            ? resp[item][\"value\"] === \"\" || resp[item][\"value\"] === undefined\r\n              ? \"\"\r\n              : resp[item][\"value\"]\r\n            : resp[item][\"value\"];\r\n      }\r\n    });\r\n    if (data.id === \"\") {\r\n      delete data.id;\r\n    }\r\n    let mode = data.id === undefined ? add : update;\r\n    mode(data).then(\r\n      (event) => {\r\n        console.log(\"ID Generated: \", event);\r\n        dispatch({\r\n          type: \"REFRESH_DATA\",\r\n          payload: true,\r\n        });\r\n      },\r\n      (error) => {\r\n        window.alert(data.id === undefined ? AddErrorMsg : UpdateErrorMsg);\r\n      }\r\n    );\r\n    setShowAddUpdateForm(false);\r\n  }\r\n\r\n  function deleteTableData(row) {\r\n    if (\r\n      window.confirm(\r\n        `Are you sure you want to delete:\\r ${row.firstName} ${row.lastName}?`\r\n      )\r\n    ) {\r\n      deleteRecord(row.id).then(\r\n        (event) => {\r\n          getTableData();\r\n        },\r\n        (error) => {\r\n          window.alert(DeleteErrorMsg);\r\n        }\r\n      );\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <AddDataBtn showAddUpdateForm={() => setShowAddUpdateForm(true)} />\r\n      <Form\r\n        modal={showAddUpdateForm}\r\n        hideAddUpdateForm={() => setShowAddUpdateForm(false)}\r\n        addUpdateData={addUpdateData}\r\n        initialData={initialFormData}\r\n        resetData={resetData}\r\n      />\r\n      <DataTableComp\r\n        isError={isError}\r\n        isResponse={isResponse}\r\n        tabledata={tabledata}\r\n        contextData={contextData}\r\n        delete={deleteTableData}\r\n        update={updateTableData}\r\n        showAddUpdateForm={() => setShowAddUpdateForm(true)}\r\n        hideAddUpdateForm={() => setShowAddUpdateForm(false)}\r\n      />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default DataContainer;\r\n","import React from \"react\";\r\nimport NoData from \"../NoDataComponent/NoData\";\r\nimport DataTable from \"react-data-table-component\";\r\nimport { FaTrashAlt, FaPencilAlt } from \"react-icons/fa\";\r\nimport ErrorMessage from \"../ErrrorMessageComponent/ErrorMessage\";\r\nimport { customStyles, GetErrorMSG } from \"../../Constants/Constant\";\r\nimport LoadingSpinner from \"../LoadingSpinnerComponent/LoadingSpinner\";\r\n\r\nfunction DataTableComp(props) {\r\n  const columns = [\r\n    {\r\n      name: \"First Name\",\r\n      selector: \"firstName\",\r\n      sortable: true,\r\n    },\r\n    {\r\n      name: \"Last Name\",\r\n      selector: \"lastName\",\r\n      sortable: true,\r\n    },\r\n    {\r\n      name: \"Address\",\r\n      selector: \"address\",\r\n      sortable: true,\r\n    },\r\n    {\r\n      name: \"State\",\r\n      selector: \"state\",\r\n      sortable: true,\r\n    },\r\n    {\r\n      name: \"Pin Code\",\r\n      selector: \"pinCode\",\r\n      sortable: true,\r\n    },\r\n    {\r\n      name: \"Country\",\r\n      selector: \"country\",\r\n      sortable: true,\r\n    },\r\n    {\r\n      cell: (row) => (\r\n        <div>\r\n          <FaPencilAlt\r\n            className=\"editIcon\"\r\n            onClick={props.update.bind(null, row)}\r\n          />\r\n          <FaTrashAlt\r\n            className=\"deleteLocation\"\r\n            onClick={props.delete.bind(null, row)}\r\n          />\r\n        </div>\r\n      ),\r\n      button: true,\r\n    },\r\n  ];\r\n\r\n  const paginationOptions = { rowsPerPageText: \"Items per page\" };\r\n\r\n  const { tabledata, isResponse, isError } = props;\r\n  if (isResponse && !isError) {\r\n    return tabledata.length !== 0 ? (\r\n      <section className=\"locationSection content\">\r\n        <DataTable\r\n          columns={columns}\r\n          noHeader={true}\r\n          highlightOnHover\r\n          pagination\r\n          paginationComponentOptions={paginationOptions}\r\n          dense={true}\r\n          size={10}\r\n          customStyles={customStyles}\r\n          theme=\"solarized\"\r\n          defaultSortField={\"serial\"}\r\n          data={tabledata}\r\n        />\r\n      </section>\r\n    ) : (\r\n      <NoData />\r\n    );\r\n  } else if (isResponse && isError) {\r\n    return <ErrorMessage ErrorMessage={GetErrorMSG} />;\r\n  } else {\r\n    return <LoadingSpinner />;\r\n  }\r\n}\r\n\r\nexport default DataTableComp;\r\n","import React, { Component } from \"react\";\r\nimport Modal from \"../ModalComponent/Modal\";\r\nimport { formFields } from \"../../Utility/formFields\";\r\nimport {\r\n  NameErrorMsg,\r\n  SpecialCharErrorMsg,\r\n  PinCodeErrorMsg,\r\n} from \"../../Constants/Constant\";\r\n\r\nclass Form extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    const state = {};\r\n    this.timeout = 0;\r\n    for (let i = 0; i < formFields.length; i++) {\r\n      state[formFields[i].fieldId] = {\r\n        value: \"\",\r\n        errorState: { error: false, message: \"\" },\r\n      };\r\n    }\r\n    this.state = state;\r\n  }\r\n\r\n  static getDerivedStateFromProps(nextProps, prevState) {\r\n    const {\r\n      firstName,\r\n      lastName,\r\n      address,\r\n      country,\r\n      pinCode,\r\n    } = nextProps.initialData;\r\n\r\n    if (\r\n      firstName.value !== \"\" &&\r\n      lastName.value !== \"\" &&\r\n      address.value !== \"\" &&\r\n      country.value !== \"\" &&\r\n      pinCode.value !== \"\" &&\r\n      prevState.firstName.value === \"\" &&\r\n      prevState.lastName.value === \"\" &&\r\n      prevState.address.value === \"\" &&\r\n      prevState.country.value === \"\" &&\r\n      prevState.pinCode.value === \"\"\r\n    ) {\r\n      return nextProps.initialData;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  cancelHandler = (event) => {\r\n    this.props.hideAddUpdateForm();\r\n    event.preventDefault();\r\n    this.resetData();\r\n  };\r\n\r\n  resetData = () => {\r\n    this.props.resetData();\r\n    let state = {};\r\n    for (let i = 0; i < formFields.length; i++) {\r\n      state[formFields[i].fieldId] = {\r\n        value: \"\",\r\n        errorState: { error: false, message: \"\" },\r\n      };\r\n    }\r\n    state[\"id\"] = {\r\n      value: \"\",\r\n      errorState: { error: false, message: \"\" },\r\n    };\r\n    this.setState({ Error: false });\r\n    this.setState(state);\r\n  };\r\n\r\n  submitHandler = (event) => {\r\n    const {\r\n      firstName,\r\n      lastName,\r\n      address,\r\n      country,\r\n      pinCode,\r\n      state,\r\n    } = this.state;\r\n\r\n    if (\r\n      firstName.value === \"\" ||\r\n      lastName.value === \"\" ||\r\n      address.value === \"\" ||\r\n      country.value === \"\" ||\r\n      pinCode.value === \"\" ||\r\n      state.value === \"\"\r\n    ) {\r\n      this.Error = true;\r\n      this.setState({ Error: true });\r\n      event.preventDefault();\r\n      setTimeout(() => {\r\n        this.setState({ Error: false });\r\n      }, 3000);\r\n    } else {\r\n      this.props.addUpdateData(this.state);\r\n      event.preventDefault();\r\n      this.resetData();\r\n    }\r\n  };\r\n\r\n  handleChange = (evt) => {\r\n    let field = evt.target.name;\r\n    let value = evt.target.value;\r\n    let validate =\r\n      value.length === 0 || evt.target.name === \"country\"\r\n        ? true\r\n        : this.detectInputValidation(evt);\r\n    if (validate) {\r\n      if (\r\n        (field === \"pinCode\" || field === \"country\") &&\r\n        this.state.country.value.length !== 0 &&\r\n        this.state.pinCode.value.length > 3\r\n      ) {\r\n        if (this.timeout) clearTimeout(this.timeout);\r\n        this.timeout = setTimeout(() => {\r\n          this.getPincodeState(\r\n            this.state.pinCode.value,\r\n            this.state.country.value\r\n          );\r\n        }, 1500);\r\n      }\r\n      this.setState((prevState) => ({\r\n        [field]: {\r\n          ...prevState[field],\r\n          value: value,\r\n          errorState: {\r\n            ...prevState[field].errorState,\r\n            error: false,\r\n            message: \"\",\r\n          },\r\n        },\r\n      }));\r\n    } else {\r\n      var errroMessage;\r\n      switch (evt.target.name) {\r\n        case \"firstName\":\r\n          errroMessage = NameErrorMsg;\r\n          break;\r\n        case \"lastName\":\r\n          errroMessage = NameErrorMsg;\r\n          break;\r\n        case \"address\":\r\n          errroMessage = SpecialCharErrorMsg;\r\n          break;\r\n        case \"pinCode\":\r\n          errroMessage = PinCodeErrorMsg;\r\n          break;\r\n\r\n        default:\r\n          errroMessage = \"\";\r\n          break;\r\n      }\r\n      this.setErrorState(field, errroMessage);\r\n    }\r\n  };\r\n\r\n  setErrorState(field, errorMsg) {\r\n    this.setState((prevState) => ({\r\n      [field]: {\r\n        ...prevState[field],\r\n        errorState: {\r\n          ...prevState[field].errorState,\r\n          error: true,\r\n          message: errorMsg,\r\n        },\r\n      },\r\n    }));\r\n    setTimeout(() => {\r\n      this.setState((prevState) => ({\r\n        [field]: {\r\n          ...prevState[field],\r\n          errorState: {\r\n            ...prevState[field].errorState,\r\n            error: false,\r\n            message: \"\",\r\n          },\r\n        },\r\n      }));\r\n    }, 3000);\r\n  }\r\n\r\n  detectInputValidation(evt) {\r\n    const regex = new RegExp(evt.target.attributes.regex.value);\r\n    if (regex.test(evt.target.value)) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  getPincodeState(pin, country) {\r\n    fetch(\r\n      `https://api.worldpostallocations.com/pincode?postalcode=${pin}&countrycode=${country}`\r\n    )\r\n      .then((res) => res.json())\r\n      .then(\r\n        (data) => {\r\n          if (data.result.length > 0) {\r\n            this.setState((prevState) => ({\r\n              pinCode: {\r\n                ...prevState[\"pinCode\"],\r\n                errorState: {\r\n                  ...prevState[\"state\"].errorState,\r\n                  error: false,\r\n                  message: \"\",\r\n                },\r\n              },\r\n            }));\r\n            this.setState((prevState) => ({\r\n              state: {\r\n                ...prevState[\"state\"],\r\n                value: data.result[0].state,\r\n                errorState: {\r\n                  ...prevState[\"state\"].errorState,\r\n                  error: false,\r\n                  message: \"\",\r\n                },\r\n              },\r\n            }));\r\n          } else {\r\n            this.setState((prevState) => ({\r\n              state: {\r\n                ...prevState[\"state\"],\r\n                value: \"\",\r\n              },\r\n            }));\r\n            this.setErrorState(\r\n              \"pinCode\",\r\n              \"Invalid pin code. Please enter a valid pincode.\"\r\n            );\r\n          }\r\n        },\r\n        (error) => {\r\n          this.setErrorState(\r\n            \"pinCode\",\r\n            \"Error while retrieving state for this pin code\"\r\n          );\r\n        }\r\n      );\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <form>\r\n        {formFields.map((formFields) => {\r\n          const {\r\n            fieldName,\r\n            fieldId,\r\n            fieldType,\r\n            fieldRequired,\r\n            fieldOptions,\r\n            fieldRegEx,\r\n            readOnly,\r\n            maxLength,\r\n          } = formFields;\r\n          const { errorState } = this.state[fieldId];\r\n          switch (fieldType) {\r\n            case \"text\":\r\n              return (\r\n                <div key={fieldId} className={fieldId}>\r\n                  <label\r\n                    htmlFor={fieldId}\r\n                    required={fieldRequired}\r\n                    className=\"addUpdateDataLabel\"\r\n                  >\r\n                    {fieldName}\r\n                  </label>\r\n                  <input\r\n                    type=\"text\"\r\n                    name={fieldId}\r\n                    autoComplete=\"off\"\r\n                    readOnly={readOnly}\r\n                    value={this.state[fieldId].value}\r\n                    onChange={this.handleChange}\r\n                    className=\"addUpdateDataInput\"\r\n                    regex={fieldRegEx}\r\n                    maxLength={maxLength}\r\n                  ></input>\r\n                  {errorState.error && (\r\n                    <div className=\"errorMsg\">{errorState.message}</div>\r\n                  )}\r\n                </div>\r\n              );\r\n\r\n            case \"textArea\":\r\n              return (\r\n                <div key={fieldId} className={fieldId}>\r\n                  <label\r\n                    htmlFor={fieldId}\r\n                    required={fieldRequired}\r\n                    className=\"addUpdateDataLabel\"\r\n                  >\r\n                    {fieldName}\r\n                  </label>\r\n                  <textarea\r\n                    name={fieldId}\r\n                    autoComplete=\"off\"\r\n                    readOnly={readOnly}\r\n                    value={this.state[fieldId].value}\r\n                    onChange={this.handleChange}\r\n                    className=\"addUpdateDataInput\"\r\n                    regex={fieldRegEx}\r\n                    maxLength=\"140\"\r\n                    cols=\"73\"\r\n                    rows=\"3\"\r\n                  ></textarea>\r\n                  {errorState.error && (\r\n                    <div className=\"errorMsg\">{errorState.message}</div>\r\n                  )}\r\n                </div>\r\n              );\r\n            case \"select\":\r\n              return (\r\n                <div key={fieldId} className={fieldId}>\r\n                  <label\r\n                    className=\"addUpdateDataLabel\"\r\n                    required={fieldRequired}\r\n                    htmlFor={fieldId}\r\n                  >\r\n                    {fieldName}\r\n                  </label>\r\n                  <select\r\n                    type=\"text\"\r\n                    name={fieldId}\r\n                    value={this.state[fieldId].value}\r\n                    onChange={this.handleChange}\r\n                    className=\"addUpdateDataInput\"\r\n                  >\r\n                    <option value=\"\">Select</option>\r\n                    {fieldOptions.map((item) => (\r\n                      <option key={item} value={item}>\r\n                        {item}\r\n                      </option>\r\n                    ))}\r\n                  </select>\r\n                </div>\r\n              );\r\n            default:\r\n              return null;\r\n          }\r\n        })}\r\n        <div className=\"actionBtn\">\r\n          <button\r\n            className=\"cnclBtn\"\r\n            type=\"button\"\r\n            onClick={this.cancelHandler}\r\n          >\r\n            Cancel\r\n          </button>\r\n          <button type=\"submit\" onClick={this.submitHandler}>\r\n            Submit\r\n          </button>\r\n        </div>\r\n        {this.state.Error && (\r\n          <div className=\"errorMsg requiredError\">\r\n            Required fields are missing**\r\n          </div>\r\n        )}\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Modal(Form);\r\n","import React, { Component } from \"react\";\r\n\r\nconst Modal =  (WrappedComponent) => {\r\n  return class extends Component {\r\n    render() {\r\n      return (\r\n        <div className={this.props.modal ? \"modal show-modal\" : \"modal\"}>\r\n          <div className=\"modal-content\">\r\n            <WrappedComponent {...this.props} />\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n  };\r\n};\r\n\r\nexport default Modal;\r\n","import React, { Component } from \"react\";\nimport \"./App.scss\";\nimport { initDB } from \"react-indexed-db\";\nimport { DBConfig } from \"../src/Configurations/DBConfig\";\nimport Header from \"./Components/HeaderComponent/Header\";\nimport ErrorBoundary from \"./Components/ErrorBoundryComponent/ErrorBoundry\";\nimport DataContainer from \"./Components/DataContainerComponent/DataContainer\";\n\ninitDB(DBConfig);\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"LocationApp\">\n        <Header />\n        <ErrorBoundary>\n          <DataContainer />\n        </ErrorBoundary>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","export const DBConfig = {\r\n  name: 'MyDB',\r\n  version: 1,\r\n  objectStoresMeta: [\r\n    {\r\n      store: 'cpData',\r\n      storeConfig: { keyPath: 'id', autoIncrement: true },\r\n      storeSchema: [\r\n        { name: 'name', keypath: 'name', options: { unique: false } }\r\n      ]\r\n    }\r\n  ]\r\n};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","let initialState = {\r\n  refreshTable: true,\r\n};\r\n\r\nconst rootReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case \"REFRESH_DATA\":\r\n      return {\r\n        ...state,\r\n        refreshTable: action.payload,\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default rootReducer;\r\n","import rootReducer from \"../Reducers/reducer\";\r\nimport { createStore } from \"redux\";\r\n\r\nconst store = createStore(rootReducer);\r\n\r\nexport default store;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { Provider } from \"react-redux\";\nimport store from \"./Redux/Store/store\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}